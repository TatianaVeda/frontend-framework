import { getState, setState, subscribe } from 'framework/state.js';
import { Config } from 'framework/config.js';

const MODE_LABELS = {
  light:  'üåû –°–≤–µ—Ç–ª–∞—è',
  dark:   'üåô –¢—ë–º–Ω–∞—è',
  custom: 'üé® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è',
  auto:   'üåì –ê–≤—Ç–æ'
};

export function ThemeSwitcher() {
  const modes = Config.theme.available;
  const changeMode = mode => setState('themeMode', mode);

  let updateUI;

  // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å–∫—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Å–µ –∫—Ä—É–∂–∫–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É customTheme
  function updateColorDots() {
    document.querySelectorAll('.color-dot').forEach(dot => {
      const varName = dot.dataset.var;
      dot.style.backgroundColor =
        getState('customTheme')[varName] ||
        Config.theme.vars.light[varName];
    });
  }

  subscribe('themeMode', () => updateUI && updateUI());
  subscribe('customTheme', updateColorDots);

  return {
    tag: 'div',
    props: { class: 'theme-switcher page card' },
    children: [
      { tag: 'h2', children: '–¢–µ–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' },
      {
        tag: 'div',
        props: { class: 'theme-buttons flex gap-2' },
        children: modes.map(m => ({
          tag: 'button',
          props: {
            'data-mode': m,
            class: `btn btn-sm ${getState('themeMode') === m ? 'active' : ''}`
          },
          events: { click: () => changeMode(m) },
          children: MODE_LABELS[m]
        }))
      },
      { tag: 'h3', children: '–ö–∞—Å—Ç–æ–º–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞' },
      {
        tag: 'div',
        props: { class: 'custom-palette grid-2cols' },
        children: Object.entries(Config.theme.vars.light).map(([varName, defaultVal]) => ({
          tag: 'div',
          props: { class: 'palette-item flex items-center' },
          children: [
            {
              tag: 'div',
              props: {
                class: 'color-dot',
                'data-var': varName
              },
              lifecycle: {
                mount(node) {
                  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç —Å—Ä–∞–∑—É –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
                  node.style.backgroundColor =
                    getState('customTheme')[varName] || defaultVal;
                },
                update(node) {
                  // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ-—Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è
                  node.style.backgroundColor =
                    getState('customTheme')[varName] || defaultVal;
                }
              }
            },
            { tag: 'span', children: varName.replace('--', '') },
            {
              tag: 'input',
              props: {
                type: 'color',
                value: getState('customTheme')[varName] || defaultVal
              },
              events: {
                input: e => {
                  const ct = {
                    ...getState('customTheme'),
                    [varName]: e.target.value
                  };
                  setState('customTheme', ct);
                  setState('themeMode', 'custom');
                }
              }
            }
          ]
        }))
      }
    ],
    lifecycle: {
      mount(node) {
        updateUI = () => {
          // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
          node.querySelectorAll('.theme-buttons button').forEach(btn => {
            btn.classList.toggle(
              'active',
              btn.dataset.mode === getState('themeMode')
            );
          });
          // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ–º –ø–∞–ª–∏—Ç—Ä—É
          node.querySelector('.custom-palette').style.display =
            getState('themeMode') === 'custom' ? 'grid' : 'none';
        };
        updateUI();
        updateColorDots(); // –∏ —Å—Ä–∞–∑—É —Ä–∞—Å–∫—Ä–∞—Å–∏—Ç—å –∫—Ä—É–∂–∫–∏
      },
      unmount() {
        updateUI = null;
      }
    }
  };
}
