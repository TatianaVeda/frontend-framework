// example/components/ImageGallery.js
import { defineComponent } from 'framework/components.js';
import { setState, getState } from 'framework/state.js';
import { navigateTo } from 'framework/router.js';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö API –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ë–ï–ó –∫–ª—é—á–µ–π!)
const GALLERY_CONFIG = {
  // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!)
  SOURCES: {
    PICSUM: 'https://picsum.photos/',           // Lorem Ipsum –¥–ª—è —Ñ–æ—Ç–æ
    JSONPLACEHOLDER: 'https://jsonplaceholder.typicode.com/photos', // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    UNSPLASH: 'https://api.unsplash.com/',      // Unsplash (demo —Ä–µ–∂–∏–º)
    PLACEHOLDER: 'https://via.placeholder.com/' // –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–≥–ª—É—à–∫–∏
  },
  
  // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback
  DEMO_IMAGES: [
    { id: 1, title: 'Mountain üèîÔ∏è (demo)', src: '/android-chrome-192x192.png', desc: 'Beautiful mountain view' },
    { id: 2, title: 'City üèôÔ∏è (demo)', src: '/favicon-32x32.png', desc: 'Modern city skyline' },
    { id: 3, title: 'Ocean üåä (demo)', src: '/android-chrome-512x512.png', desc: 'Peaceful ocean waves' },
    { id: 4, title: 'Forest üå≤ (demo)', src: '/apple-touch-icon.png', desc: 'Green forest path' }
  ]
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ë–ï–ó –∫–ª—é—á–µ–π API
async function fetchGalleryImages(query = 'nature', count = 8) {
  console.log('=== –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ===');
  
  // 1. –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Picsum (Lorem Ipsum –¥–ª—è —Ñ–æ—Ç–æ - –ë–ï–ó –∫–ª—é—á–µ–π!)
  try {
    console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Picsum...');
    const images = [];
    for (let i = 0; i < count; i++) {
      const randomId = Math.floor(Math.random() * 1000) + 1;
      images.push({
        id: i + 1,
        title: `Photo ${i + 1} üì∑ (picsum)`,
        src: `https://picsum.photos/400/300?random=${randomId}`,
        desc: `Beautiful random photo from Picsum ‚Ä¢ ID: ${randomId}`
      });
    }
    console.log('‚úÖ Picsum –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã:', images.length);
    return images;
  } catch (error) {
    console.error('‚ùå Picsum –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }
  
  // 2. –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JSONPlaceholder photos (–ë–ï–ó –∫–ª—é—á–µ–π!)
  try {
    console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ JSONPlaceholder...');
    const response = await fetch('https://jsonplaceholder.typicode.com/photos');
    
    if (response.ok) {
      const data = await response.json();
      return data.slice(0, count).map((photo, index) => ({
        id: index + 1,
        title: `${photo.title} üåê (jsonplaceholder)`,
        src: photo.url,
        desc: `Album ID: ${photo.albumId} ‚Ä¢ Photo ID: ${photo.id}`
      }));
    }
  } catch (error) {
    console.log('JSONPlaceholder –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }
  
  // 3. –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  try {
    console.log('–°–æ–∑–¥–∞—ë–º placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    const images = [];
    const colors = ['4f46e5', '059669', 'dc2626', 'ea580c', '7c3aed', '0891b2'];
    const subjects = ['nature', 'landscape', 'city', 'architecture', 'water', 'forest'];
    
    for (let i = 0; i < count; i++) {
      const color = colors[i % colors.length];
      const subject = subjects[i % subjects.length];
      images.push({
        id: i + 1,
        title: `${subject.charAt(0).toUpperCase() + subject.slice(1)} ${i + 1} üñºÔ∏è`,
        src: `https://via.placeholder.com/400x300/${color}/ffffff?text=${subject}+${i + 1}`,
        desc: `Placeholder ${subject} image ‚Ä¢ Color: #${color}`
      });
    }
    return images;
  } catch (error) {
    console.log('Placeholder API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }
  
  // Fallback –Ω–∞ –¥–µ–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏');
  return GALLERY_CONFIG.DEMO_IMAGES;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≥–æ—Ä
async function fetchMountainImages(count = 6) {
  // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Unsplash API
  try {
    console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–æ—Ä –∏–∑ Unsplash...');
    const response = await fetch(
      `https://api.unsplash.com/search/photos?query=mountain,landscape&per_page=${count}&orientation=landscape`,
      {
        headers: {
          'Authorization': `Client-ID demo_key` // –ú–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∫–ª—é—á–∞ –≤ demo —Ä–µ–∂–∏–º–µ
        }
      }
    );
    
    if (response.ok) {
      const data = await response.json();
      return data.results.map((photo, index) => ({
        id: index + 1,
        title: `${photo.alt_description || `Mountain ${index + 1}`} üèîÔ∏è`,
        src: photo.urls.regular,
        desc: `By ${photo.user.name} ‚Ä¢ ${photo.likes} ‚ù§Ô∏è ‚Ä¢ Unsplash`
      }));
    }
  } catch (error) {
    console.log('Unsplash –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≥–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º Picsum...');
  }
  
  // Fallback –Ω–∞ Picsum
  try {
    console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–æ—Ä –∏–∑ Picsum...');
    const images = [];
    for (let i = 0; i < count; i++) {
      const randomId = Math.floor(Math.random() * 1000) + 1;
      images.push({
        id: i + 1,
        title: `Mountain ${i + 1} üèîÔ∏è`,
        src: `https://picsum.photos/400/300?random=${randomId}`,
        desc: `Beautiful mountain landscape ‚Ä¢ Picsum ID: ${randomId}`
      });
    }
    return images;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≥–æ—Ä:', error.message);
    return GALLERY_CONFIG.DEMO_IMAGES;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤
async function fetchCityImages(count = 6) {
  try {
    console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤...');
    const images = [];
    for (let i = 0; i < count; i++) {
      const randomId = Math.floor(Math.random() * 1000) + 1;
      images.push({
        id: i + 1,
        title: `City ${i + 1} üèôÔ∏è`,
        src: `https://picsum.photos/400/300?random=${randomId}&grayscale=0`,
        desc: `Urban cityscape ‚Ä¢ Picsum ID: ${randomId}`
      });
    }
    return images;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤:', error.message);
    return GALLERY_CONFIG.DEMO_IMAGES;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–∫–µ–∞–Ω–∞
async function fetchOceanImages(count = 6) {
  try {
    console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–∫–µ–∞–Ω–∞...');
    const images = [];
    for (let i = 0; i < count; i++) {
      const randomId = Math.floor(Math.random() * 1000) + 1;
      images.push({
        id: i + 1,
        title: `Ocean ${i + 1} üåä`,
        src: `https://picsum.photos/400/300?random=${randomId}`,
        desc: `Peaceful ocean view ‚Ä¢ Picsum ID: ${randomId}`
      });
    }
    return images;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–∫–µ–∞–Ω–∞:', error.message);
    return GALLERY_CONFIG.DEMO_IMAGES;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ª–µ—Å–∞
async function fetchForestImages(count = 6) {
  try {
    console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–µ—Å–∞...');
    const images = [];
    for (let i = 0; i < count; i++) {
      const randomId = Math.floor(Math.random() * 1000) + 1;
      images.push({
        id: i + 1,
        title: `Forest ${i + 1} üå≤`,
        src: `https://picsum.photos/400/300?random=${randomId}&sepia=0`,
        desc: `Green forest landscape ‚Ä¢ Picsum ID: ${randomId}`
      });
    }
    return images;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ª–µ—Å–∞:', error.message);
    return GALLERY_CONFIG.DEMO_IMAGES;
  }
}

// –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
let GALLERY_IMAGES = GALLERY_CONFIG.DEMO_IMAGES;

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–∞–ª–µ—Ä–µ–∏
defineComponent('image-gallery', (props) => {
  const images = getState('gallery.images') || GALLERY_IMAGES;
  const selectedId = getState('gallery.selectedId');
  
  return {
    tag: 'div',
    props: { class: 'image-gallery' },
    children: [
      { tag: 'h1', children: ['üì∏ Image Gallery'] },
              {
          tag: 'div',
          props: { class: 'gallery-controls' },
          children: [
            {
              tag: 'button',
              props: { type: 'button' },
              events: {
                click: async (e) => {
                  e.preventDefault();
                  console.log('üé≤ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–°–ª—É—á–∞–π–Ω—ã–µ —Ñ–æ—Ç–æ"');
                  setState('gallery.loading', true);
                  try {
                    const newImages = await fetchGalleryImages('random', 8);
                    setState('gallery.images', newImages);
                    GALLERY_IMAGES = newImages;
                  } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
                  } finally {
                    setState('gallery.loading', false);
                  }
                }
              },
              children: ['üé≤ –°–ª—É—á–∞–π–Ω—ã–µ —Ñ–æ—Ç–æ']
            },
            {
              tag: 'button',
              props: { type: 'button' },
              events: {
                click: async (e) => {
                  e.preventDefault();
                  console.log('üèîÔ∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–ì–æ—Ä—ã"');
                  setState('gallery.loading', true);
                  try {
                    const newImages = await fetchMountainImages(6);
                    setState('gallery.images', newImages);
                    GALLERY_IMAGES = newImages;
                  } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä:', error);
                  } finally {
                    setState('gallery.loading', false);
                  }
                }
              },
              children: ['üèîÔ∏è –ì–æ—Ä—ã']
            },
            {
              tag: 'button',
              props: { type: 'button' },
              events: {
                click: async (e) => {
                  e.preventDefault();
                  console.log('üèôÔ∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–ì–æ—Ä–æ–¥–∞"');
                  setState('gallery.loading', true);
                  try {
                    const newImages = await fetchCityImages(6);
                    setState('gallery.images', newImages);
                    GALLERY_IMAGES = newImages;
                  } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ–¥–æ–≤:', error);
                  } finally {
                    setState('gallery.loading', false);
                  }
                }
              },
              children: ['üèôÔ∏è –ì–æ—Ä–æ–¥–∞']
            },
            {
              tag: 'button',
              props: { type: 'button' },
              events: {
                click: async (e) => {
                  e.preventDefault();
                  console.log('üåä –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–û–∫–µ–∞–Ω"');
                  setState('gallery.loading', true);
                  try {
                    const newImages = await fetchOceanImages(6);
                    setState('gallery.images', newImages);
                    GALLERY_IMAGES = newImages;
                  } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–∫–µ–∞–Ω–∞:', error);
                  } finally {
                    setState('gallery.loading', false);
                  }
                }
              },
              children: ['üåä –û–∫–µ–∞–Ω']
            },
            {
              tag: 'button',
              props: { type: 'button' },
              events: {
                click: async (e) => {
                  e.preventDefault();
                  console.log('üå≤ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–õ–µ—Å"');
                  setState('gallery.loading', true);
                  try {
                    const newImages = await fetchForestImages(6);
                    setState('gallery.images', newImages);
                    GALLERY_IMAGES = newImages;
                  } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–µ—Å–∞:', error);
                  } finally {
                    setState('gallery.loading', false);
                  }
                }
              },
              children: ['üå≤ –õ–µ—Å']
            }
          ]
        },
      getState('gallery.loading') ? 
        { tag: 'div', props: { class: 'loading' }, children: ['‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...'] } : null,
      {
        tag: 'div',
        props: { class: 'gallery-grid' },
        children: images.map(img => ({
          tag: 'div',
          props: { 
            class: 'gallery-item',
            'data-id': img.id
          },
          events: {
            click: () => {
              setState('gallery.selectedId', img.id);
              navigateTo(`/gallery/${img.id}`);
            }
          },
          children: [
            {
              tag: 'img',
              props: {
                src: img.src,
                alt: img.title,
                class: 'gallery-image'
              }
            },
            { tag: 'h3', children: [img.title] },
            { tag: 'p', children: [img.desc] }
          ]
        }))
      },
      selectedId ? {
        tag: 'div',
        props: { class: 'modal-overlay' },
        events: {
          click: () => {
            setState('gallery.selectedId', null);
            navigateTo('/gallery');
          }
        },
        children: [
          {
            tag: 'div',
            props: { class: 'modal-content' },
            children: [
              {
                tag: 'button',
                props: { class: 'close-btn' },
                events: {
                  click: () => {
                    setState('gallery.selectedId', null);
                    navigateTo('/gallery');
                  }
                },
                children: ['√ó']
              },
              (() => {
                const selected = images.find(img => img.id === selectedId);
                return selected ? [
                  { tag: 'img', props: { src: selected.src, alt: selected.title } },
                  { tag: 'h2', children: [selected.title] },
                  { tag: 'p', children: [selected.desc] }
                ] : [];
              })()
            ]
          }
        ]
      } : null
    ].filter(Boolean)
  };
});

export function initImageGallery() {
  console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–∞–ª–µ—Ä–µ–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
  
  setState('gallery', {
    images: GALLERY_IMAGES,
    selectedId: null,
    loading: false
  });
  
  console.log('–ì–∞–ª–µ—Ä–µ—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
}

export function selectImage(id) {
  setState('gallery.selectedId', parseInt(id));
}

export { GALLERY_IMAGES }; 