// example/components/WeatherWidget.js
import { defineComponent, renderComponent, bindComponentToStateWithDeps } from 'framework/components.js';
import { setState, getState, subscribe, unsubscribe } from 'framework/state.js';
import { getData } from 'framework/api.js';
import { delegateEvent, removeDelegateEventsByNamespace } from 'framework/events.js';
import { clearChildren, setTextContent } from 'framework/dom.js';
import Logger from 'framework/logger.js';

// –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ (–Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö)
const POPULAR_CITIES = [
  'London', 'New York', 'Êù±‰∫¨ (Tokyo)', '–ú–æ—Å–∫–≤–∞', 'Paris', 'Berlin', 'Rome', 'Madrid',
  'Amsterdam', 'Âåó‰∫¨ (Beijing)', 'Sydney', 'Toronto', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ö–∏—ó–≤ (Kiev)'
];

// –ö–∞—Ä—Ç–∞ –∫–æ–¥–æ–≤ –ø–æ–≥–æ–¥—ã wttr.in –≤ —ç–º–æ–¥–∑–∏
const WEATHER_ICONS = {
  '113': '‚òÄÔ∏è', '116': '‚õÖ', '119': '‚òÅÔ∏è', '122': '‚òÅÔ∏è',
  '143': 'üå´Ô∏è', '176': 'üå¶Ô∏è', '179': 'üå®Ô∏è', '182': 'üå®Ô∏è',
  '185': 'üåßÔ∏è', '200': '‚õàÔ∏è', '227': '‚ùÑÔ∏è', '230': '‚ùÑÔ∏è',
  '248': 'üå´Ô∏è', '260': 'üå´Ô∏è', '263': 'üå¶Ô∏è', '266': 'üå¶Ô∏è',
  '281': 'üåßÔ∏è', '284': 'üåßÔ∏è', '293': 'üå¶Ô∏è', '296': 'üåßÔ∏è',
  '299': 'üåßÔ∏è', '302': 'üåßÔ∏è', '305': 'üåßÔ∏è', '308': 'üåßÔ∏è',
  '311': 'üåßÔ∏è', '314': 'üåßÔ∏è', '317': 'üå®Ô∏è', '320': 'üå®Ô∏è',
  '323': '‚ùÑÔ∏è', '326': '‚ùÑÔ∏è', '329': '‚ùÑÔ∏è', '332': '‚ùÑÔ∏è',
  '335': '‚ùÑÔ∏è', '338': '‚ùÑÔ∏è', '350': 'üå®Ô∏è', '353': 'üå¶Ô∏è',
  '356': 'üåßÔ∏è', '359': 'üåßÔ∏è', '362': 'üå®Ô∏è', '365': 'üå®Ô∏è',
  '368': '‚ùÑÔ∏è', '371': '‚ùÑÔ∏è', '374': 'üå®Ô∏è', '377': 'üå®Ô∏è',
  '386': '‚õàÔ∏è', '389': '‚õàÔ∏è', '392': '‚õàÔ∏è', '395': '‚õàÔ∏è'
};

const DEFAULT_WEATHER_ICON = 'üå§Ô∏è';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∂–µ—Ç–∞
const CACHE_TIMEOUT = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç
const REQUEST_TIMEOUT = 5000; // 5 —Å–µ–∫—É–Ω–¥

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ —á–µ—Ä–µ–∑ API —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function fetchWeatherData(city) {
  const cacheKey = `weather_${city.toLowerCase()}`;
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º API —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    const response = await getData(`https://wttr.in/${encodeURIComponent(city)}?format=j1`, {
      timeout: REQUEST_TIMEOUT,
      cacheKey,
      headers: {
        'Accept': 'application/json',
        'User-Agent': 'curl/7.64.1'
      },
      metricsLabel: `weather-${city}`,
      onError: (error) => {
        Logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è ${city}:`, error);
      }
    });

    Logger.debug('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã:', response);
    
    if (response.current_condition && response.current_condition[0]) {
      const current = response.current_condition[0];
      
      return {
        city: city,
        temp: Math.round(current.temp_C),
        weather: current.weatherDesc[0].value,
        icon: WEATHER_ICONS[current.weatherCode] || DEFAULT_WEATHER_ICON,
        source: 'wttr.in'
      };
    } else {
      throw new Error('–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API');
    }
  } catch (error) {
    Logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è ${city}:`, error);
    throw error;
  }
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–≥–æ–¥—ã —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º
defineComponent('weather-widget', () => {
  const currentWeather = getState('weather.current');
  const loading = getState('weather.loading');
  
  Logger.debug('–†–µ–Ω–¥–µ—Ä weather-widget. loading:', loading, 'currentWeather:', !!currentWeather);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
  let weatherContent;
  
  if (loading) {
    weatherContent = {
      tag: 'div',
      props: { class: 'weather-display loading' },
      children: ['üåÄ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≥–æ–¥—ã...']
    };
  } else if (currentWeather) {
    weatherContent = {
      tag: 'div',
      props: { class: 'weather-display' },
      children: [
        {
          tag: 'div',
          props: { class: 'weather-icon' },
          children: [currentWeather.icon || 'üå§Ô∏è']
        },
        { tag: 'h2', children: [currentWeather.city] },
        { tag: 'div', props: { class: 'temperature' }, children: [`${currentWeather.temp}¬∞C`] },
        { 
          tag: 'div', 
          props: { class: 'condition' }, 
          children: [
            currentWeather.weather,
            currentWeather.source === 'wttr.in' ? ' üåê' : ''
          ] 
        }
      ]
    };
  } else {
    weatherContent = {
      tag: 'div',
      props: { class: 'weather-display' },
      children: ['–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã']
    };
  }

  // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
  return {
    tag: 'div',
    props: { 
      class: `weather-widget${loading ? ' loading' : ''}`,
      'data-component': 'weather-widget'
    },
    children: [
      { tag: 'h1', children: ['üå§Ô∏è Weather Widget'] },
      {
        tag: 'div',
        props: { class: 'city-input-section' },
        children: [
          { tag: 'label', children: ['–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:'] },
          {
            tag: 'div',
            props: { class: 'input-group' },
            children: [
              {
                tag: 'input',
                props: { 
                  type: 'text',
                  class: 'city-input',
                  placeholder: '–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, London, Êù±‰∫¨...',
                  'data-action': 'city-input'
                }
              },
              {
                tag: 'button',
                props: { 
                  class: 'search-btn',
                  type: 'button',
                  'data-action': 'search-weather'
                },
                children: [loading ? 'üîÑ' : 'üîç']
              }
            ]
          }
        ]
      },
      {
        tag: 'div',
        props: { class: 'popular-cities' },
        children: [
          { tag: 'p', children: ['–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:'] },
          {
            tag: 'div',
            props: { class: 'city-buttons' },
            children: POPULAR_CITIES.map(city => ({
              tag: 'button',
              props: { 
                class: 'city-btn',
                type: 'button',
                'data-action': 'select-city',
                'data-city': city
              },
              children: [city]
            }))
          }
        ]
      },
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–≥–æ–¥—ã –∫–∞–∫ –µ–¥–∏–Ω—ã–π –±–ª–æ–∫
      weatherContent
    ]
  };
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º persistentState)
function saveToHistory(city, weatherData) {
  const history = getState('weather.history') || [];
  const newEntry = {
    city,
    timestamp: Date.now(),
    weather: weatherData
  };
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤
  const updatedHistory = [newEntry, ...history.slice(0, 9)];
  setState('weather.history', updatedHistory);
  Logger.debug('–°–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é:', city);
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≥–æ–¥—ã
async function loadWeather(city) {
  if (getState('weather.loading')) {
    Logger.debug('–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
    return;
  }

  Logger.debug('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–≥–æ–¥—ã –¥–ª—è:', city);
  setState('weather.loading', true);
  
  try {
    const weatherData = await fetchWeatherData(city);
    Logger.debug('–ü–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ:', weatherData);
    setState('weather.current', weatherData);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
    saveToHistory(city, weatherData);
  } catch (error) {
    Logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≥–æ–¥—ã:', error);
    const errorData = {
      city: city,
      temp: '--',
      weather: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.',
      icon: '‚ùå',
      source: 'error'
    };
    console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–µ:', errorData);
    setState('weather.current', errorData);
  } finally {
    setState('weather.loading', false);
    console.log('–£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ loading: false. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', getState('weather'));
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
export function getWeatherHistory() {
  return getState('weather.history') || [];
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏–π–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
export function initWeatherWidget() {
  Logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–≥–æ–¥–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞...');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  setState('weather', {
    current: null,
    loading: false,
    history: []
  });

  const element = document.getElementById('weather-widget');
  if (!element) {
    Logger.error('–≠–ª–µ–º–µ–Ω—Ç #weather-widget –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  let isRendering = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–Ω–¥–µ—Ä–æ–≤
  let lastRenderState = null; // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
  
  // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const render = () => {
    if (isRendering) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const currentState = {
      current: getState('weather.current'),
      loading: getState('weather.loading')
    };
    
    const stateChanged = !lastRenderState || 
      JSON.stringify(lastRenderState) !== JSON.stringify(currentState);
    
    if (!stateChanged) {
      Logger.debug('–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —Ä–µ–Ω–¥–µ—Ä –ø—Ä–æ–ø—É—â–µ–Ω');
      return;
    }
    
    isRendering = true;
    lastRenderState = currentState;
    
    try {
      Logger.debug('–í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É DOM');
      
      // –ü–û–õ–ù–ê–Ø –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç—ã —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
      clearChildren(element); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç—É —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ –≤–º–µ—Å—Ç–æ innerHTML = ''
      element._vNode = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
      
      // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã –∏ –∞—Ç—Ä–∏–±—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –Ω–∞–∫–æ–ø–∏—Ç—å—Å—è
      element.className = '';
      element.removeAttribute('style');
      
      renderComponent('weather-widget', {}, element);
      Logger.debug('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ –≤–∏–¥–∂–µ—Ç–∞:', error);
    } finally {
      isRendering = false;
    }
  };
  
  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å debounce –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö —Ä–µ–Ω–¥–µ—Ä–æ–≤
  let renderTimeout;
  const debouncedRender = () => {
    clearTimeout(renderTimeout);
    renderTimeout = setTimeout(render, 100); // –£–≤–µ–ª–∏—á–∏–ª–∏ debounce –¥–æ 100ms –¥–ª—è –º–µ–Ω—å—à–µ–π —á–∞—Å—Ç–æ—Ç—ã —Ä–µ–Ω–¥–µ—Ä–æ–≤
  };
  
  // –ü–æ–¥–ø–∏—Å–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —á–∞—Å—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  subscribe('weather.current', debouncedRender);
  subscribe('weather.loading', debouncedRender);
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
  delegateEvent(element, 'click', '[data-action="search-weather"]', (e) => {
    e.preventDefault();
    const input = element.querySelector('[data-action="city-input"]');
    const cityName = input ? input.value.trim() : '';
    if (cityName && !getState('weather.loading')) {
      loadWeather(cityName);
    }
  }, { namespace: 'weather-widget' });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
  delegateEvent(element, 'keypress', '[data-action="city-input"]', (e) => {
    if (e.key === 'Enter' && e.target.value.trim()) {
      e.preventDefault();
      if (!getState('weather.loading')) {
        loadWeather(e.target.value.trim());
      }
    }
  }, { namespace: 'weather-widget' });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
  delegateEvent(element, 'click', '[data-action="select-city"]', (e) => {
    e.preventDefault();
    const city = e.target.dataset.city;
    if (city && !getState('weather.loading')) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–∫–æ–±–∫–∞—Ö –¥–ª—è API
      const cityForAPI = city.split(' (')[0];
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è DOM —É—Ç–∏–ª–∏—Ç—ã
      const input = element.querySelector('[data-action="city-input"]');
      if (input) {
        input.value = city;
      }
      loadWeather(cityForAPI);
    }
  }, { namespace: 'weather-widget' });

  Logger.info('–ü–æ–≥–æ–¥–Ω—ã–π –≤–∏–¥–∂–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  
  // –ü–µ—Ä–≤–∏—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
  setTimeout(render, 100);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  return () => {
    clearTimeout(renderTimeout);
    removeDelegateEventsByNamespace(element, 'weather-widget');
    unsubscribe('weather.current', debouncedRender);
    unsubscribe('weather.loading', debouncedRender);
    Logger.info('–ü–æ–≥–æ–¥–Ω—ã–π –≤–∏–¥–∂–µ—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω');
  };
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export { loadWeather }; 